(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(15),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Prompt:wght@200&display=swap);"]),i.push([e.id,"html, body {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n    font-family: 'Prompt', sans-serif;\n}\n\n#content {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n}\n\n#sideDiv {\n    height: 100%;\n    width: 300px;\n    background-color: rgb(100, 100, 100);\n    border-right: solid 3px black;\n}\n\nspan {\n    margin-left: 10px;\n    float: right;\n}\n\n#tableDiv {\n    width: 1000px;\n}\n\n#mainDiv {\n    height: 100%;\n    flex-grow: 1;\n    background-color: lightgray\n}\n\n#projectTitle {\n    margin: 0;\n    text-align: center;\n    height: 25px;\n    font-weight: bold;\n    font-size: 30px;\n}\n\n.projectDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 35px;\n    border-bottom: 1px solid black;\n}\n\n#wrapperDiv{\n    border-top: 1px solid black;\n}\n\n.todoBtnDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n}\n\n\n\ntable {\n    width: 1000px;\n    table-layout: fixed;\n    margin-top: 25px;\n}\n\ntd {\n    text-align: center;\n}\n\n#newProjectButtonDiv, .newTodoButtonDiv  {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.newTodoDiv, .newProjectDiv, .editTodoDiv {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1;\n}\n\n.hidden {\n    display: none;\n}\n\n#newTodoForm, #newProjectForm, #editTodoForm {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content:space-around;\n    height: 250px;\n    width: 250px;\n    border: 1px solid black;\n    margin-top: 20px;;\n}\n\n#projTitleForm {\n    margin-bottom: 50px;\n}\n\n#projTitleLabel {\n    margin-top: 70px;\n}\n\n.editTodoBtnDiv, .newTodoBtnsDiv, .newProjectBtnDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100px;\n}\n\n#startDiv {\n    width: inherit;\n    height: inherit;\n    z-index: 1;\n}\n\n.active {\n    background-color: rgb(218, 218, 218);\n}\n\n.priority {\n    background-color: rgb(253, 74, 74);\n}\n\nbutton {\n    border: 0;\n    background-color: transparent;\n    transition: 0.3s ease-in-out;\n}\n\nbutton:hover {\n    transform: scale(1.1);\n}\n\np {\n    text-align: center;\n}\n\n.titleP {\n    margin: auto;\n    padding-left: 30px;\n    font-weight: bold;\n    transition: 0.3s ease-in-out;\n}\n\n.titleP:hover {\n    transform: scale(1.1);\n}\n\n#mainP {\n    font-weight: bold;\n    font-size: 25px;\n}\n\n#startP {\n    font-weight: bold;\n    font-size: 25px;\n}\n\nform {\n    background-color: white;\n    border-radius: 5px;\n}\n\ntable {\n    border-collapse: collapse;\n}\n\ntr {\n    height: 40px;\n}\n\ninput {\n    border-radius: 5px;\n}\n\ninput[type='checkbox'] {\n    margin-bottom: 10px;\n}\n\nimg {\n    height: 20px;\n    width: 20px;\n}\n\n.addImg{\n    width: 24px;\n    height: 24px;\n}\n\n.addImgMain {\n    width: 32px;\n    height: 32px;\n    margin-top: 8px;\n}\n\n.closeImg {\n    width: 22px;\n    height: 22px;\n}\n\nlabel {\n    font-weight: bolder;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,SAAS;IACT,UAAU;IACV,iCAAiC;AACrC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,oCAAoC;IACpC,6BAA6B;AACjC;;AAEA;IACI,iBAAiB;IACjB,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ;AACJ;;AAEA;IACI,SAAS;IACT,kBAAkB;IAClB,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,YAAY;IACZ,8BAA8B;AAClC;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;AACjC;;;;AAIA;IACI,aAAa;IACb,mBAAmB;IACnB,gBAAgB;AACpB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,4BAA4B;IAC5B,aAAa;IACb,YAAY;IACZ,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;IAC7B,YAAY;AAChB;;AAEA;IACI,cAAc;IACd,eAAe;IACf,UAAU;AACd;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,kCAAkC;AACtC;;AAEA;IACI,SAAS;IACT,6BAA6B;IAC7B,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,4BAA4B;AAChC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,kBAAkB;AACtB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,mBAAmB;AACvB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Prompt:wght@200&display=swap');\n\nhtml, body {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n    font-family: 'Prompt', sans-serif;\n}\n\n#content {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n}\n\n#sideDiv {\n    height: 100%;\n    width: 300px;\n    background-color: rgb(100, 100, 100);\n    border-right: solid 3px black;\n}\n\nspan {\n    margin-left: 10px;\n    float: right;\n}\n\n#tableDiv {\n    width: 1000px;\n}\n\n#mainDiv {\n    height: 100%;\n    flex-grow: 1;\n    background-color: lightgray\n}\n\n#projectTitle {\n    margin: 0;\n    text-align: center;\n    height: 25px;\n    font-weight: bold;\n    font-size: 30px;\n}\n\n.projectDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    height: 35px;\n    border-bottom: 1px solid black;\n}\n\n#wrapperDiv{\n    border-top: 1px solid black;\n}\n\n.todoBtnDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n}\n\n\n\ntable {\n    width: 1000px;\n    table-layout: fixed;\n    margin-top: 25px;\n}\n\ntd {\n    text-align: center;\n}\n\n#newProjectButtonDiv, .newTodoButtonDiv  {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.newTodoDiv, .newProjectDiv, .editTodoDiv {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1;\n}\n\n.hidden {\n    display: none;\n}\n\n#newTodoForm, #newProjectForm, #editTodoForm {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content:space-around;\n    height: 250px;\n    width: 250px;\n    border: 1px solid black;\n    margin-top: 20px;;\n}\n\n#projTitleForm {\n    margin-bottom: 50px;\n}\n\n#projTitleLabel {\n    margin-top: 70px;\n}\n\n.editTodoBtnDiv, .newTodoBtnsDiv, .newProjectBtnDiv {\n    display: flex;\n    align-items: center;\n    justify-content: space-around;\n    width: 100px;\n}\n\n#startDiv {\n    width: inherit;\n    height: inherit;\n    z-index: 1;\n}\n\n.active {\n    background-color: rgb(218, 218, 218);\n}\n\n.priority {\n    background-color: rgb(253, 74, 74);\n}\n\nbutton {\n    border: 0;\n    background-color: transparent;\n    transition: 0.3s ease-in-out;\n}\n\nbutton:hover {\n    transform: scale(1.1);\n}\n\np {\n    text-align: center;\n}\n\n.titleP {\n    margin: auto;\n    padding-left: 30px;\n    font-weight: bold;\n    transition: 0.3s ease-in-out;\n}\n\n.titleP:hover {\n    transform: scale(1.1);\n}\n\n#mainP {\n    font-weight: bold;\n    font-size: 25px;\n}\n\n#startP {\n    font-weight: bold;\n    font-size: 25px;\n}\n\nform {\n    background-color: white;\n    border-radius: 5px;\n}\n\ntable {\n    border-collapse: collapse;\n}\n\ntr {\n    height: 40px;\n}\n\ninput {\n    border-radius: 5px;\n}\n\ninput[type='checkbox'] {\n    margin-bottom: 10px;\n}\n\nimg {\n    height: 20px;\n    width: 20px;\n}\n\n.addImg{\n    width: 24px;\n    height: 24px;\n}\n\n.addImgMain {\n    width: 32px;\n    height: 32px;\n    margin-top: 8px;\n}\n\n.closeImg {\n    width: 22px;\n    height: 22px;\n}\n\nlabel {\n    font-weight: bolder;\n}"],sourceRoot:""}]);const d=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(r)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,a=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o=[],i=!0,d=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);i=!0);}catch(e){d=!0,a=e}finally{try{i||null==n.return||n.return()}finally{if(d)throw a}}return o}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if(!i)return o;if("function"==typeof btoa){var d=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(d),l="/*# ".concat(c," */"),s=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(s).concat([l]).join("\n")}return[o].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],d=0;d<e.length;d++){var c=e[d],l=r.base?c[0]+r.base:c[0],s=o[l]||0,u="".concat(l," ").concat(s);o[l]=s+1;var m=n(u),h={css:c[1],media:c[2],sourceMap:c[3]};-1!==m?(t[m].references++,t[m].updater(h)):t.push({identifier:u,updater:a(h,r),references:1}),i.push(u)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var d=n(o[i]);t[d].references--}for(var c=r(e,a),l=0;l<o.length;l++){var s=n(o[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,a=n.media,o=n.sourceMap;a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},570:(e,t,n)=>{e.exports=n.p+"04616cb5b16f252a2607.png"},44:(e,t,n)=>{e.exports=n.p+"d4ef0ea4e58612c05097.png"},532:(e,t,n)=>{e.exports=n.p+"c008412cc22aa743721a.jpg"},285:(e,t,n)=>{e.exports=n.p+"0423e9054bbc9277b034.jpg"}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function r(n){e(1,arguments);var r=t(n);return!isNaN(r)}var a={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function o(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,r=e.formats[n]||e.formats[e.defaultWidth];return r}}var i,d={date:o({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:o({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:o({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function l(e){return function(t,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=a.width?String(a.width):o;r=e.formattingValues[i]||e.formattingValues[o]}else{var d=e.defaultWidth,c=a.width?String(a.width):e.defaultWidth;r=e.values[c]||e.values[d]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function s(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,d=o[0],c=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(c)?m(c,(function(e){return e.test(d)})):u(c,(function(e){return e.test(d)}));i=e.valueCallback?e.valueCallback(l):l,i=n.valueCallback?n.valueCallback(i):i;var s=t.slice(d.length);return{value:i,rest:s}}}function u(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function m(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const h={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof a[e]?a[e]:1===t?a[e].one:a[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:d,formatRelative:function(e,t,n,r){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:l({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:l({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:l({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:l({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:l({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(i.matchPattern);if(!n)return null;var r=n[0],a=e.match(i.parsePattern);if(!a)return null;var o=i.valueCallback?i.valueCallback(a[0]):a[0];o=t.valueCallback?t.valueCallback(o):o;var d=e.slice(r.length);return{value:o,rest:d}}),era:s({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:s({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:s({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:s({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:s({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function p(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function g(n,r){e(2,arguments);var a=t(n).getTime(),o=p(r);return new Date(a+o)}function f(t,n){e(2,arguments);var r=p(n);return g(t,-r)}function A(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const v=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return A("yy"===t?r%100:r,t.length)},w=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):A(n+1,2)},C=function(e,t){return A(e.getUTCDate(),t.length)},b=function(e,t){return A(e.getUTCHours()%12||12,t.length)},y=function(e,t){return A(e.getUTCHours(),t.length)},B=function(e,t){return A(e.getUTCMinutes(),t.length)},x=function(e,t){return A(e.getUTCSeconds(),t.length)},E=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return A(Math.floor(r*Math.pow(10,n-3)),t.length)};var I=864e5;function T(n){e(1,arguments);var r=1,a=t(n),o=a.getUTCDay(),i=(o<r?7:0)+o-r;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function D(n){e(1,arguments);var r=t(n),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=T(o),d=new Date(0);d.setUTCFullYear(a,0,4),d.setUTCHours(0,0,0,0);var c=T(d);return r.getTime()>=i.getTime()?a+1:r.getTime()>=c.getTime()?a:a-1}function S(t){e(1,arguments);var n=D(t),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var a=T(r);return a}var k=6048e5;function P(n,r){e(1,arguments);var a=r||{},o=a.locale,i=o&&o.options&&o.options.weekStartsOn,d=null==i?0:p(i),c=null==a.weekStartsOn?d:p(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=t(n),s=l.getUTCDay(),u=(s<c?7:0)+s-c;return l.setUTCDate(l.getUTCDate()-u),l.setUTCHours(0,0,0,0),l}function j(n,r){e(1,arguments);var a=t(n,r),o=a.getUTCFullYear(),i=r||{},d=i.locale,c=d&&d.options&&d.options.firstWeekContainsDate,l=null==c?1:p(c),s=null==i.firstWeekContainsDate?l:p(i.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(o+1,0,s),u.setUTCHours(0,0,0,0);var m=P(u,r),h=new Date(0);h.setUTCFullYear(o,0,s),h.setUTCHours(0,0,0,0);var g=P(h,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=g.getTime()?o:o-1}function L(t,n){e(1,arguments);var r=n||{},a=r.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:p(o),d=null==r.firstWeekContainsDate?i:p(r.firstWeekContainsDate),c=j(t,n),l=new Date(0);l.setUTCFullYear(c,0,d),l.setUTCHours(0,0,0,0);var s=P(l,n);return s}var M=6048e5;function Y(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+A(o,2)}function U(e,t){return e%60==0?(e>0?"-":"+")+A(Math.abs(e)/60,2):F(e,t)}function F(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+A(Math.floor(a/60),2)+n+A(a%60,2)}const W={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return v(e,t)},Y:function(e,t,n,r){var a=j(e,r),o=a>0?a:1-a;return"YY"===t?A(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):A(o,t.length)},R:function(e,t){return A(D(e),t.length)},u:function(e,t){return A(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return A(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return A(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return w(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return A(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(n,r,a,o){var i=function(n,r){e(1,arguments);var a=t(n),o=P(a,r).getTime()-L(a,r).getTime();return Math.round(o/M)+1}(n,o);return"wo"===r?a.ordinalNumber(i,{unit:"week"}):A(i,r.length)},I:function(n,r,a){var o=function(n){e(1,arguments);var r=t(n),a=T(r).getTime()-S(r).getTime();return Math.round(a/k)+1}(n);return"Io"===r?a.ordinalNumber(o,{unit:"week"}):A(o,r.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):C(e,t)},D:function(n,r,a){var o=function(n){e(1,arguments);var r=t(n),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var o=r.getTime(),i=a-o;return Math.floor(i/I)+1}(n);return"Do"===r?a.ordinalNumber(o,{unit:"dayOfYear"}):A(o,r.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return A(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return A(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return A(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return b(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):y(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):A(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):A(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):B(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):x(e,t)},S:function(e,t){return E(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return U(a);case"XXXX":case"XX":return F(a);case"XXXXX":case"XXX":default:return F(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return U(a);case"xxxx":case"xx":return F(a);case"xxxxx":case"xxx":default:return F(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Y(a,":");case"OOOO":default:return"GMT"+F(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Y(a,":");case"zzzz":default:return"GMT"+F(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return A(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return A((r._originalDate||e).getTime(),t.length)}};function q(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function O(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const N={p:O,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),a=r[1],o=r[2];if(!o)return q(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",q(a,t)).replace("{{time}}",O(o,t))}};function z(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var X=["D","DD"],H=["YY","YYYY"];function Q(e){return-1!==X.indexOf(e)}function R(e){return-1!==H.indexOf(e)}function G(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var J=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,_=/''/g,V=/[a-zA-Z]/;function K(n,a,o){e(2,arguments);var i=String(a),d=o||{},c=d.locale||h,l=c.options&&c.options.firstWeekContainsDate,s=null==l?1:p(l),u=null==d.firstWeekContainsDate?s:p(d.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=c.options&&c.options.weekStartsOn,g=null==m?0:p(m),A=null==d.weekStartsOn?g:p(d.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var v=t(n);if(!r(v))throw new RangeError("Invalid time value");var w=z(v),C=f(v,w),b={firstWeekContainsDate:u,weekStartsOn:A,locale:c,_originalDate:v},y=i.match(Z).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,N[t])(e,c.formatLong,b):e})).join("").match(J).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return ee(e);var r=W[t];if(r)return!d.useAdditionalWeekYearTokens&&R(e)&&G(e,a,n),!d.useAdditionalDayOfYearTokens&&Q(e)&&G(e,a,n),r(C,e,c.localize,b);if(t.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return y}function ee(e){return e.match($)[1].replace(_,"'")}var te=n(532),ne=n(285),re=n(570),ae=n(44);let oe;const ie=()=>{le();let e=document.getElementById("wrapperDiv");for(let t=0;t<localStorage.length;t++){let n=localStorage.key(t),r=Ee(n),a=document.createElement("p");a.classList.add("titleP"),a.textContent=r.title,a.dataset.index=n;let o=document.createElement("div");o.dataset.project=n,o.classList.add("projectDiv");let i=document.createElement("img");i.src=te,i.dataset.projectindex=localStorage.key(t);let d=document.createElement("button");d.dataset.projectindex=localStorage.key(t),d.classList.add("deleteProjectButton"),d.appendChild(i),o.appendChild(a),o.appendChild(d),e.appendChild(o)}null==oe&&we(),document.querySelectorAll(".titleP").forEach((e=>e.addEventListener("click",de))),document.querySelectorAll(".deleteProjectButton").forEach((e=>e.addEventListener("click",Te)))},de=e=>{let t=e.target.dataset.index,n=oe;if(oe=t,Ce(),null==oe)we();else{let r=document.getElementById("table"),a=document.getElementById("tableDiv"),o=(document.getElementById("newTodoDiv"),document.getElementById("projectTitle")),i=localStorage.getItem(t);i=JSON.parse(i);let d=i.todoList;o.textContent=i.title,n?be(n,t):localStorage.length<2?document.querySelector(".projectDiv").classList.add("active"):e.target.parentNode.classList.add("active");let c=document.getElementById("tbody");ce();for(let e=0;e<d.length;e++){let n=document.createElement("tr");n.dataset.rowIndex=e;let o=document.createElement("td");o.textContent=d[e].title;let i=document.createElement("td");i.textContent=d[e].description;let l=document.createElement("td"),s=K(new Date(d[e].dueDate),"Pp");l.textContent=s,d[e].priority&&n.classList.add("priority");let u=document.createElement("div");u.classList.add("todoBtnDiv");let m=document.createElement("td"),h=document.createElement("button"),p=document.createElement("img");p.src=ne,p.classList.add("editImg"),p.dataset.project=t,p.dataset.index=e,h.classList.add("editBtn"),h.dataset.project=t,h.dataset.index=e,h.appendChild(p);let g=document.createElement("button"),f=document.createElement("img");f.src=te,f.classList.add("deleteImg"),f.dataset.project=t,f.dataset.index=e,g.classList.add("deleteTodoButton"),g.dataset.project=t,g.dataset.index=e,g.appendChild(f),u.appendChild(h),u.appendChild(g),m.appendChild(u),n.appendChild(o),n.appendChild(i),n.appendChild(l),n.appendChild(m),c.appendChild(n),r.appendChild(c),a.appendChild(r)}document.querySelectorAll(".editBtn").forEach((e=>e.addEventListener("click",ge))),document.querySelectorAll(".deleteTodoButton").forEach((e=>e.addEventListener("click",De)))}},ce=()=>{let e=document.getElementById("tbody");for(;e.firstChild;)e.firstChild.remove()},le=()=>{let e=document.getElementById("wrapperDiv");for(;e.firstChild;)e.firstChild.remove()},se=()=>{document.forms.newTodoForm.title.value="",document.forms.newTodoForm.description.value="",document.forms.newTodoForm.date.value="",document.forms.newTodoForm.priority.value="",me()},ue=()=>{document.getElementById("tableDiv").classList.add("hidden"),document.querySelector(".newTodoButtonDiv").classList.add("hidden"),document.getElementById("projectTitle").classList.add("hidden"),document.getElementById("newTodoDiv").classList.remove("hidden"),document.getElementById("addTodoBtn").addEventListener("click",Se.bind(void 0,oe)),document.getElementById("closeTodoBtn").addEventListener("click",se)},me=()=>{document.getElementById("tableDiv").classList.remove("hidden"),document.querySelector(".newTodoButtonDiv").classList.remove("hidden"),document.getElementById("projectTitle").classList.remove("hidden"),document.getElementById("newTodoDiv").classList.add("hidden")},he=()=>{document.getElementById("tableDiv").classList.add("hidden"),document.querySelector(".newTodoButtonDiv").classList.add("hidden"),document.getElementById("projectTitle").classList.add("hidden"),Ce(),document.querySelector(".newProjectDiv").classList.remove("hidden");let e=Ie();document.getElementById("addProjBtn").addEventListener("click",ke.bind(void 0,e)),document.getElementById("closeTodoBtn").addEventListener("click",ve)},pe=()=>{document.getElementById("tableDiv").classList.remove("hidden"),document.querySelector(".newTodoButtonDiv").classList.remove("hidden"),document.getElementById("projectTitle").classList.remove("hidden"),document.getElementById("newProjectDiv").classList.add("hidden")},ge=e=>{document.getElementById("tableDiv").classList.add("hidden"),document.querySelector(".newTodoButtonDiv").classList.add("hidden"),document.getElementById("projectTitle").classList.add("hidden"),document.getElementById("editTodoDiv").classList.remove("hidden");let t=e.target.dataset.project,n=e.target.dataset.index,r=Ee(t);fe(r.todoList[n]),document.getElementById("editTodoBtn").addEventListener("click",Pe.bind(void 0,t,n)),document.getElementById("closeTodoBtn").addEventListener("click",Ae)},fe=e=>{document.forms.editTodoForm.title.value=e.title,document.forms.editTodoForm.description.value=e.description;let t=new Date(e.dueDate);t=t.toISOString(),t=t.slice(0,t.length-8),document.getElementById("editDateForm").value=t,document.forms.editTodoForm.priority.checked=e.priority},Ae=()=>{document.getElementById("tableDiv").classList.remove("hidden"),document.querySelector(".newTodoButtonDiv").classList.remove("hidden"),document.getElementById("projectTitle").classList.remove("hidden"),document.getElementById("editProjectDiv").classList.add("hidden")},ve=()=>{document.forms.newProjectFrom.title.value="",pe()},we=()=>{document.getElementById("startDiv").classList.remove("hidden")},Ce=()=>{document.getElementById("startDiv").classList.add("hidden")},be=(e,t)=>{document.querySelector(`[data-project="${e}"`).classList.remove("active"),document.querySelector(`[data-project="${t}"`).classList.add("active")},ye=()=>{document.querySelector(`[data-index="${oe}"`).dispatchEvent(new Event("click"))},Be=(e,t=[])=>({title:e,todoList:t}),xe=(e,t,n,r)=>({title:e,description:t,dueDate:n,priority:r}),Ee=e=>{let t=localStorage.getItem(e);return t=JSON.parse(t),t},Ie=()=>{let e=localStorage.key(localStorage.length-1);return localStorage.length<1?0:parseInt(e)+1},Te=e=>{let t=e.target.dataset.projectindex;localStorage.removeItem(t),(e=>{document.querySelector(`[data-project='${e}']`).remove(),oe=localStorage.key(0),localStorage.length<1&&(oe=void 0),ie(),oe&&ye()})(t)},De=e=>{let t=e.target.dataset.project,n=e.target.dataset.index,r=Ee(t);r.todoList.splice(n,1);let a=Be(r.title,r.todoList);localStorage.removeItem(t),localStorage.setItem(t,JSON.stringify(a)),(e=>{document.querySelector(`[data-row-index="${e}"]`).remove()})(n),(e=>{let t=document.querySelectorAll(".editBtn"),n=document.querySelectorAll(".deleteTodoButton");for(let e=0;e<t.length;e++)t[e].dataset.index=e,n[e].dataset.index=e})(),ye()},Se=e=>{let t=Ee(e),n=document.forms.newTodoForm.title.value,r=document.forms.newTodoForm.description.value,a=document.forms.newTodoForm.date.value,o=document.forms.newTodoForm.priority.checked,i=xe(n,r,a,o);t.todoList.push(i),localStorage.removeItem(e),t=JSON.stringify(t),window.localStorage.setItem(e,t),me(),ie(),ye()},ke=e=>{let t=document.forms.newProjectForm.title.value,n=Be(t);n=JSON.stringify(n),localStorage.setItem(e,n),pe(),ie()},Pe=(e,t)=>{let n=document.forms.editTodoForm.title.value,r=document.forms.editTodoForm.description.value,a=document.getElementById("editDateForm").value,o=document.forms.editTodoForm.priority.checked,i=Ee(e);i.todoList.splice(t,1);let d=xe(n,r,a,o);i.todoList.push(d);let c=Be(i.title,i.todoList);localStorage.removeItem(e),c=JSON.stringify(c),localStorage.setItem(e,c)};var je=n(379),Le=n.n(je),Me=n(795),Ye=n.n(Me),Ue=n(569),Fe=n.n(Ue),We=n(565),qe=n.n(We),Oe=n(216),Ne=n.n(Oe),ze=n(589),Xe=n.n(ze),He=n(426),Qe={};Qe.styleTagTransform=Xe(),Qe.setAttributes=qe(),Qe.insert=Fe().bind(null,"head"),Qe.domAPI=Ye(),Qe.insertStyleElement=Ne(),Le()(He.Z,Qe),He.Z&&He.Z.locals&&He.Z.locals,0===localStorage.length&&(()=>{const e=Be("My Project");let t=K(new Date,"Pp");const n=xe("My Todo","Default Todo list",t,!1);e.todoList.push(n),localStorage.setItem("0",JSON.stringify(e))})(),(()=>{let e=document.getElementById("content"),t=document.createElement("div");t.id="sideDiv";let n=document.createElement("div");n.id="mainDiv";let r=document.createElement("div");r.classList.toggle("hidden"),r.id="newTodoDiv",r.classList.add("newTodoDiv");let a=document.createElement("form");a.id="newTodoForm",a.name="newTodoForm";let o=document.createElement("input");o.name="title";let i=document.createElement("label");i.for="title",i.textContent="Title";let d=document.createElement("input");d.name="description";let c=document.createElement("label");c.for="description",c.textContent="Description";let l=document.createElement("input");l.type="datetime-local",l.name="date";let s=document.createElement("label");s.for="date",s.textContent="Due date";let u=document.createElement("input");u.type="checkbox",u.name="priority";let m=document.createElement("label");m.for="priority",m.textContent="Priority";let h=document.createElement("div");h.classList.add("newTodoBtnsDiv");let p=document.createElement("img");p.src=re,p.classList.add("addImg");let g=document.createElement("button");g.id="addTodoBtn",g.appendChild(p);let f=document.createElement("img");f.src=ae,f.classList.add("closeImg");let A=document.createElement("button");A.id="closeTodoBtn",A.appendChild(f),h.appendChild(g),h.appendChild(A),a.appendChild(i),a.appendChild(o),a.appendChild(c),a.appendChild(d),a.appendChild(s),a.appendChild(l),a.appendChild(m),a.appendChild(u),a.appendChild(h),r.appendChild(a);let v=document.createElement("div");v.classList.toggle("hidden"),v.classList.add("newProjectDiv");let w=document.createElement("form");w.id="newProjectForm",w.name="newProjectForm";let C=document.createElement("input");C.name="title",C.id="projTitleForm";let b=document.createElement("label");b.for="title",b.textContent="Title",b.id="projTitleLabel";let y=document.createElement("div");y.classList.add("newProjectBtnDiv");let B=document.createElement("img");B.src=re,B.classList.add("addImg");let x=document.createElement("button");x.id="addProjBtn",x.appendChild(B);let E=document.createElement("img");E.src=ae,E.classList.add("closeImg");let I=document.createElement("button");I.id="closeProjBtn",I.appendChild(E),y.appendChild(x),y.appendChild(I),w.appendChild(b),w.appendChild(C),w.appendChild(y),v.appendChild(w);let T=document.createElement("div");T.classList.toggle("hidden"),T.id="editTodoDiv",T.classList.add("editTodoDiv");let D=document.createElement("form");D.id="editTodoForm",D.name="editTodoForm";let S=document.createElement("input");S.name="title";let k=document.createElement("label");k.for="title",k.textContent="Title";let P=document.createElement("input");P.name="description";let j=document.createElement("label");j.for="description",j.textContent="Description";let L=document.createElement("input");L.type="datetime-local",L.id="editDateForm",L.name="date";let M=document.createElement("label");M.for="date",M.textContent="Due date";let Y=document.createElement("input");Y.type="checkbox",Y.name="priority";let U=document.createElement("label");U.for="priority",U.textContent="Priority";let F=document.createElement("div");F.classList.add("editTodoBtnDiv");let W=document.createElement("img");W.src=ne;let q=document.createElement("button");q.id="editTodoBtn",q.appendChild(W);let O=document.createElement("img");O.src=ae;let N=document.createElement("button");N.id="closeTodoBtn",N.appendChild(O),F.appendChild(q),F.appendChild(N),D.appendChild(k),D.appendChild(S),D.appendChild(j),D.appendChild(P),D.appendChild(M),D.appendChild(L),D.appendChild(U),D.appendChild(Y),D.appendChild(F),T.appendChild(D);let z=document.createElement("div");z.id="startDiv",z.classList.add("hidden");let X=document.createElement("p");X.textContent="Select a project or create a new one",X.id="startP",z.appendChild(X),n.appendChild(r),n.appendChild(v),n.appendChild(T),n.appendChild(z),e.appendChild(t),e.appendChild(n);const H=document.getElementById("sideDiv");let Q=document.createElement("p");Q.id="mainP",Q.textContent="Projects";let R=document.createElement("div");R.id="wrapperDiv";let G=document.createElement("div");G.id="newProjectButtonDiv";let J=document.createElement("img");J.src=re,J.classList.add("addImgMain");let Z=document.createElement("button");Z.id="newProject",Z.appendChild(J),G.appendChild(Z),H.appendChild(Q),H.appendChild(R),H.appendChild(G),document.getElementById("newProject").addEventListener("click",he);const $=document.getElementById("mainDiv");let _=document.createElement("p");_.id="projectTitle";let V=document.createElement("div");V.id="tableDiv";let K=document.createElement("table");K.id="table";let ee=document.createElement("thead");ee.id="thead";let te=document.createElement("tbody");te.id="tbody";let oe=document.createElement("tr"),ie=document.createElement("th");ie.textContent="Title";let de=document.createElement("th");de.textContent="Description";let ce=document.createElement("th");ce.textContent="Due date";let le=document.createElement("img");le.src=re,le.classList.add("addImgMain");let se=document.createElement("button");se.id="newTodo",se.appendChild(le);let me=document.createElement("div");me.classList.add("newTodoButtonDiv"),me.appendChild(se),oe.appendChild(ie),oe.appendChild(de),oe.appendChild(ce),ee.appendChild(oe),K.appendChild(ee),K.appendChild(te),V.appendChild(K),$.appendChild(_),$.appendChild(V),$.appendChild(me),document.getElementById("newTodo").addEventListener("click",ue)})(),ie()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,